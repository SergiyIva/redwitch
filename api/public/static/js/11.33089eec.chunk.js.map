{"version":3,"sources":["Main/Pages/ProcessContact/Form/Inputs/PhoneSample.tsx","Main/Pages/ProcessContact/Form/Form.tsx","Main/Pages/ProcessContact/ThankYou.tsx","Main/Pages/ProcessContact/ContactError.tsx","Main/Pages/ProcessContact/ProcessContact.tsx"],"names":["PhoneSample","value","message","change","phone","useRef","getPhone","useCallback","valueArr","length","mask","join","ref","name","type","className","id","placeholder","onFocus","e","current","target","replace","trim","onBlur","onChange","required","Form","action","useFormInput","email","checkbox","content","formValue","useState","validMessages","setValidMessages","useEffect","focus","validation","useMemo","getValidation","optional","onSubmit","preventDefault","valid","isValid","variables","subscriber","describe","console","log","method","role","htmlFor","ThankYou","to","ContactError","ProcessContact","useMutation","ADD_CALL_ORDER","onCompleted","data","addCallorder","setSuccess","sendForm","loading","error","success","Spinner"],"mappings":"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","file":"static/js/11.33089eec.chunk.js","sourcesContent":["import React, { MutableRefObject, useCallback, useRef } from \"react\";\r\n\r\ntype PhoneSampleProps = {\r\n  value: string;\r\n  change: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n  message?: string;\r\n};\r\nexport const PhoneSample = ({ value, message, change }: PhoneSampleProps) => {\r\n  const phone = useRef() as MutableRefObject<HTMLInputElement>;\r\n  const getPhone = useCallback(() => {\r\n    const valueArr = [...value];\r\n    if (!value.length) return \"(___) ___-____\";\r\n    const mask = [\"(\"];\r\n    mask[1] = valueArr[0] || \"_\";\r\n    mask[2] = valueArr[1] || \"_\";\r\n    mask[3] = valueArr[2] || \"_\";\r\n    mask[4] = \")\";\r\n    mask[5] = \" \";\r\n    mask[6] = valueArr[3] || \"_\";\r\n    mask[7] = valueArr[4] || \"_\";\r\n    mask[8] = valueArr[5] || \"_\";\r\n    mask[9] = \"-\";\r\n    mask[10] = valueArr[6] || \"_\";\r\n    mask[11] = valueArr[7] || \"_\";\r\n    mask[12] = valueArr[8] || \"_\";\r\n    mask[13] = valueArr[9] || \"_\";\r\n    return mask.join(\"\");\r\n  }, [value]);\r\n  const onFocus = (e: React.FocusEvent<HTMLInputElement>) => {\r\n    phone.current.value = e.target.value.replace(/[()_\\-\\s]+/g, \"\").trim();\r\n  };\r\n  const onBlur = () => {\r\n    phone.current.value = getPhone();\r\n  };\r\n\r\n  return (\r\n    <input\r\n      ref={phone}\r\n      name=\"phone\"\r\n      type=\"text\"\r\n      className={`form-control ${\r\n        message && (message === \"isValid\" ? \"is-valid\" : \"is-invalid\")\r\n      }`}\r\n      id=\"phone\"\r\n      placeholder=\"999-999-99-99\"\r\n      value={value}\r\n      onFocus={onFocus}\r\n      onBlur={onBlur}\r\n      onChange={change}\r\n      required\r\n    />\r\n  );\r\n};\r\n","import { useFormInput } from \"../../../../Hooks/useFormInput\";\nimport {\n  FormEvent,\n  MutableRefObject,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState\n} from \"react\";\nimport {\n  Messages,\n  validation as getValidation\n} from \"../../../../functions/validation\";\nimport { MutationFunctionOptions } from \"@apollo/client\";\nimport { AddCallorderType } from \"../../../../GraphQL/Mutation\";\nimport { PhoneSample } from \"./Inputs/PhoneSample\";\n\ntype FormProps = {\n  action: (\n    options?: MutationFunctionOptions<\n      AddCallorderType[\"AddCallorder\"],\n      AddCallorderType[\"AddCallorderVars\"]\n    >\n  ) => void;\n};\n\nexport const Form = ({ action }: FormProps) => {\n  const [formValue] = useFormInput({\n    name: \"\",\n    phone: \"\",\n    email: \"\",\n    checkbox: \"false\",\n    content: \"\"\n  });\n  const [validMessages, setValidMessages] = useState<Messages | null>(null);\n  const name = useRef() as MutableRefObject<HTMLInputElement>;\n  useEffect(() => {\n    name.current.focus();\n  }, []);\n\n  const validation = useMemo(\n    () =>\n      getValidation({\n        optional: [\"email\", \"content\"]\n      }),\n    []\n  );\n  const onSubmit = useCallback(\n    (e: FormEvent) => {\n      e.preventDefault();\n      const valid = validation({\n        ...formValue.value\n      });\n      setValidMessages(valid);\n      if (valid.isValid) {\n        action({\n          variables: {\n            ...formValue.value,\n            subscriber: formValue.value.checkbox === \"true\",\n            describe: formValue.value.content\n          }\n        });\n        console.log(formValue.value);\n      }\n    },\n    [formValue.value, validation]\n  );\n  return (\n    <div className=\"container pt-3\">\n      <h2 className=\"pb-2 border-bottom\">Оставьте свой контакт в форме ниже</h2>\n      <form onSubmit={onSubmit} method=\"post\" role=\"form\">\n        <div className=\"mb-3\">\n          <label htmlFor=\"inputName1\" className=\"form-label\">\n            Ваше имя\n          </label>\n          <input\n            ref={name}\n            type=\"text\"\n            name=\"name\"\n            className={`form-control ${\n              validMessages &&\n              validMessages.name &&\n              (validMessages.name === \"isValid\" ? \"is-valid\" : \"is-invalid\")\n            }`}\n            id=\"inputName1\"\n            placeholder=\"Имя\"\n            value={formValue.value.name}\n            onChange={formValue.onChange}\n            required\n          />\n          <div id=\"invalid-phone\" className=\"invalid-feedback\">\n            {validMessages && validMessages.name}\n          </div>\n        </div>\n        <div className=\"mb-3\">\n          <label htmlFor=\"phone\" className=\"form-label\">\n            Телефон\n          </label>\n          <div className=\"input-group has-validation\">\n            <span className={\"input-group-text\"}>+7</span>\n            <PhoneSample\n              value={formValue.value.phone}\n              change={formValue.onChange}\n              message={validMessages?.phone}\n            />\n            <div id=\"invalid-phone\" className=\"invalid-feedback\">\n              {validMessages && validMessages.phone}\n            </div>\n          </div>\n          <div id=\"emailHelp\" className=\"form-text\">\n            Мы не передаем личные данные третьим лицам.\n          </div>\n        </div>\n        <div className=\"mb-3\">\n          <label htmlFor=\"inputEmail1\" className=\"form-label\">\n            Ваш email <span className=\"text-muted\">(не обязательно)</span>\n          </label>\n          <input\n            type=\"email\"\n            name=\"email\"\n            className={`form-control ${\n              validMessages &&\n              validMessages.email &&\n              (validMessages.email === \"isValid\" ? \"is-valid\" : \"is-invalid\")\n            }`}\n            id=\"inputEmail1\"\n            aria-describedby=\"emailHelp\"\n            placeholder=\"Email\"\n            value={formValue.value.email}\n            onChange={formValue.onChange}\n          />\n          <div id=\"invalid-phone\" className=\"invalid-feedback\">\n            {validMessages && validMessages.email}\n          </div>\n          <div\n            id=\"check\"\n            className={`form-check ${formValue.value.email ? \"\" : \"hidden\"}`}\n          >\n            <input\n              name=\"checkbox\"\n              type=\"checkbox\"\n              className=\"form-check-input\"\n              id=\"same-address\"\n              value={formValue.value.checkbox}\n              onChange={formValue.onChange}\n            />\n            <label className=\"form-text\" htmlFor=\"same-address\">\n              Оповещать меня о проводимых акциях и специальных предложениях.\n            </label>\n          </div>\n        </div>\n        <div className=\"mb-3\">\n          <label htmlFor=\"inputEmail1\" className=\"form-label\">\n            Комментарий <span className=\"text-muted\">(не обязательно)</span>\n          </label>\n          <textarea\n            name=\"content\"\n            className=\"form-control\"\n            aria-label=\"With textarea\"\n            value={formValue.value.content}\n            onChange={formValue.onChange}\n          />\n          <div id=\"emailHelp\" className=\"form-text\">\n            Укажите дополнительную информацию тут.\n          </div>\n        </div>\n        <button\n          id=\"buttonSub\"\n          type=\"submit\"\n          className={`btn btn-success ${\n            (!formValue.value.name || !formValue.value.phone) && \"disabled\"\n          }`}\n        >\n          Отправить\n        </button>\n      </form>\n    </div>\n  );\n};\n","import { NavLink } from \"react-router-dom\";\r\n\r\nexport const ThankYou = () => {\r\n  return (\r\n    <div className=\"container pt-3\">\r\n      <h1>Благодарим за обращение</h1>\r\n      <p>\r\n        Ваша заявка принята, контакт будет рассмотрен администрацией в ближайшее\r\n        время.\r\n      </p>\r\n      <NavLink to=\"/\">На главную</NavLink>\r\n    </div>\r\n  );\r\n};\r\n","export const ContactError = () => {\r\n  return (\r\n    <div className=\"container pt-3\">\r\n      <h1>Произошла ошибка</h1>\r\n      <p>Ошибка при сохранении контакта.</p>\r\n      <blockquote>Попробуйте повторить попытку позже.</blockquote>\r\n    </div>\r\n  );\r\n};\r\n","import { useMutation } from \"@apollo/client\";\r\nimport { ADD_CALL_ORDER, AddCallorderType } from \"../../../GraphQL/Mutation\";\r\nimport { Spinner } from \"../../../Components/Spinner/Spinner\";\r\nimport { Form } from \"./Form/Form\";\r\nimport { useState } from \"react\";\r\nimport { ThankYou } from \"./ThankYou\";\r\nimport { ContactError } from \"./ContactError\";\r\n\r\nconst ProcessContact = () => {\r\n  const [sendForm, { loading, error }] = useMutation<\r\n    AddCallorderType[\"AddCallorder\"],\r\n    AddCallorderType[\"AddCallorderVars\"]\r\n  >(ADD_CALL_ORDER, {\r\n    onCompleted: (data) => {\r\n      if (data.addCallorder) setSuccess(\"TRUE\");\r\n      else setSuccess(\"FALSE\");\r\n    }\r\n  });\r\n  const [success, setSuccess] = useState(\"\");\r\n\r\n  if (loading) return <Spinner />;\r\n  if (success === \"TRUE\") return <ThankYou />;\r\n  if (success === \"FALSE\" || error) return <ContactError />;\r\n  return <Form action={sendForm} />;\r\n};\r\n\r\nexport default ProcessContact;\r\n"],"sourceRoot":""}